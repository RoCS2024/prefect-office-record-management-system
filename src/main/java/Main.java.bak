import com.prefect.office.record.management.appl.facade.prefect.communityservice.CommunityServiceFacade;
import com.prefect.office.record.management.appl.facade.prefect.communityservice.impl.CommunityServiceFacadeImpl;
import com.prefect.office.record.management.appl.facade.prefect.offense.OffenseFacade;
import com.prefect.office.record.management.appl.facade.prefect.offense.impl.OffenseFacadeImpl;
import com.prefect.office.record.management.appl.facade.prefect.violation.ViolationFacade;
import com.prefect.office.record.management.appl.facade.prefect.violation.impl.ViolationFacadeImpl;
import com.prefect.office.record.management.appl.model.communityservice.CommunityService;
import com.prefect.office.record.management.appl.model.offense.Offense;
import com.prefect.office.record.management.appl.model.violation.Violation;
import com.prefect.office.record.management.data.dao.prefect.communityservice.impl.CommunityServiceDaoImpl;
import com.prefect.office.record.management.data.dao.prefect.offense.OffenseDao;
import com.prefect.office.record.management.data.dao.prefect.offense.impl.OffenseDaoImpl;
import com.student.information.management.StudentInfoMgtApplication;
import com.student.information.management.appl.facade.student.StudentFacade;
import com.student.information.management.appl.facade.student.impl.StudentFacadeImpl;
import com.student.information.management.appl.model.student.Student;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static final PrefectOfficeRecordMgtApplication app = new com.prefect.office.record.management.PrefectOfficeRecordMgtApplication();
    private static CommunityServiceFacade communityServiceFacade;
    private static ViolationFacade violationFacade;
    private static OffenseFacade offenseFacade;

        public static void main(String[] args) {
            com.prefect.office.record.management.PrefectOfficeRecordMgtApplication app = new com.prefect.office.record.management.PrefectOfficeRecordMgtApplication();
            communityServiceFacade = app.getCommunityserviceFacade();
            offenseFacade = app.getOffenseFacade();
            violationFacade = app.getViolationFacade();

        try {
            int choice;
            do {
                displayMenu();
                System.out.print("Choose an option: ");

                while (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter a number.");
                    scanner.next();
                }

                choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        viewAllOffense();
                        break;
                    case 2:
                        addOffense();
                        break;
                    case 3:
                        updateOffense();
                        break;
                    case 4:
                        searchAllOffenseByStudentId();
                        break;
                    case 5:
                        addViolation();
                        break;
                    case 6:
                        updateViolation();
                        break;
                    case 7:
                        viewAllViolation();
                        break;
                    case 8:
                        searchViolationById();
                        break;
                    case 9:
                        searchViolationByName();
                        break;
                    case 10:
                        filterViolationByType();
                        break;
                    case 11:
                        renderCs();
                        break;
                    case 12:
                        viewCsHistory();
                        break;
                    case 13:
                        searchCsHistoryByStudentId();
                        break;
                    case 0:
                        System.out.println("Exiting the App...");
                        break;
                    default:
                        System.out.println("Invalid choice. Please enter a valid option.");
                        break;
                }
            } while (choice != 0);
        } catch (Exception e) {
            System.err.println("An error occurred: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }

    private static void displayMenu() {
        System.out.println("Prefect System");
        System.out.println("1. View List of Offense");
        System.out.println("2. Add Offense");
        System.out.println("3. Update Offense");
        System.out.println("4. Search Offense By Student Id");
        System.out.println("5. Add Violation");
        System.out.println("6. Update Violation");
        System.out.println("7. View List of Violation");
        System.out.println("8. Search Violation By Id");
        System.out.println("9. Search Violation By Name");
        System.out.println("10. Filter Violation By Type");
        System.out.println("11. Render Community Service");
        System.out.println("12. View Community Service History");
        System.out.println("13. Search Community Service History By Student Id");
        System.out.println("0. Exit");
    }

    private static void searchAllOffenseByStudentId() {
        try {
            System.out.print("Enter Student ID: ");
            String studentId = scanner.next();

            StudentInfoMgtApplication app = new StudentInfoMgtApplication();
            StudentFacade studentFacade = app.getStudentFacade();
            Student student = studentFacade.getStudentById(studentId);

            if (student != null) {
                List<Offense> offenseRecords = offenseFacade.getAllOffenseByStudent(student);
                if (offenseRecords != null && !offenseRecords.isEmpty()) {
                    System.out.println("Offense Records");
                    for (Offense offenseRecord : offenseRecords) {
                        System.out.println("Offense ID: " + offenseRecord.getId());
                        System.out.println("Violation: " + offenseRecord.getViolation().getViolation());
                        System.out.println("Student ID: " + offenseRecord.getStudent().getStudentId());
                        System.out.println("Student Last Name: " + offenseRecord.getStudent().getLastName());
                        System.out.println("Student First Name: " + offenseRecord.getStudent().getFirstName());
                        System.out.println("Student Middle Name: " + offenseRecord.getStudent().getMiddleName());
                        System.out.println("Offense Date: " + offenseRecord.getOffenseDate());
                        System.out.println("Community Service Hours: " + offenseRecord.getCommServHours());
                        System.out.println("-----------------------------------");
                    }
                } else {
                    System.out.println("No offense records found.");
                }
            } else {
                System.out.println("No Student ID found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing all offenses: " + e.getMessage());
        }
    }

    private static void searchViolationById() {
        try {
            System.out.print("Enter Violation ID: ");
            int violationId = scanner.nextInt();

            Violation violation = violationFacade.getViolationByID(violationId);
            if (violation != null) {
                    System.out.println("-------------------------------------");
                    System.out.println("Violation ID: " + violation.getId());
                    System.out.println("Violation: " + violation.getViolation());
                    System.out.println("Violation Type: " + violation.getType());
                    System.out.println("Community Service Hours: " + violation.getCommServHours());
            } else {
                System.out.println("No Violation ID found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing all offenses: " + e.getMessage());
        }
    }

    private static void searchViolationByName() {
        try {
            System.out.print("Enter Violation: ");
            String violationName = scanner.next();
            String violationDesc = violationName.toLowerCase();
            Violation violation = violationFacade.getViolationByName(violationDesc);
            if (violation != null) {
                System.out.println("-------------------------------------");
                System.out.println("Violation ID: " + violation.getId());
                System.out.println("Violation: " + violation.getViolation());
                System.out.println("Violation Type: " + violation.getType());
                System.out.println("Community Service Hours: " + violation.getCommServHours());
            } else {
                System.out.println("No Violation found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing all offenses: " + e.getMessage());
        }
    }

    private static void searchCsHistoryByStudentId() {
        try {
            System.out.print("Enter Student ID: ");
            String studentId = scanner.next();

            StudentInfoMgtApplication app = new StudentInfoMgtApplication();
            StudentFacade studentFacade = app.getStudentFacade();
            Student student = studentFacade.getStudentById(studentId);
            if (student != null) {
                try {
                    List<CommunityService> csRecords = communityServiceFacade.getAllCsByStudent(student);

                    if (csRecords != null && !csRecords.isEmpty()) {
                        System.out.println("Community Service Records");
                        for (CommunityService csRecord : csRecords) {
                            System.out.println("Community Service ID: " + csRecord.getId());
                            System.out.println("Student ID: " + csRecord.getStudent().getStudentId());
                            System.out.println("Student Last Name: " + csRecord.getStudent().getLastName());
                            System.out.println("Student First Name: " + csRecord.getStudent().getFirstName());
                            System.out.println("Student Middle Name: " + csRecord.getStudent().getMiddleName());
                            System.out.println("Date Rendered: " + csRecord.getDate_rendered());
                            System.out.println("Hours Rendered: " + csRecord.getHours_rendered());
                            System.out.println("-----------------------------------");
                        }
                    } else {
                        System.out.println("No Community Service found.");
                    }
                } catch (Exception e) {
                    System.err.println("An error occurred while viewing community service history: " + e.getMessage());
                }
            } else {
                System.out.println("No Student ID found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing all offenses: " + e.getMessage());
        }
    }

    private static void viewAllOffense() {
        try {
            List<Offense> offenseRecords = offenseFacade.getAllOffenses();

            if (offenseRecords != null && !offenseRecords.isEmpty()) {
                System.out.println("Offense Records");
                for (Offense offenseRecord : offenseRecords) {
                    System.out.println("Offense ID: " + offenseRecord.getId());
                    System.out.println("Violation ID: " + offenseRecord.getViolation().getViolation());
                    System.out.println("Student Last Name: " + offenseRecord.getStudent().getLastName());
                    System.out.println("Student First Name: " + offenseRecord.getStudent().getFirstName());
                    System.out.println("Student Middle Name: " + offenseRecord.getStudent().getMiddleName());
                    System.out.println("Offense Date: " + offenseRecord.getOffenseDate());
                    System.out.println("-----------------------------------");
                }
            } else {
                System.out.println("No offense records found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing all offenses: " + e.getMessage());
        }
    }



    private static void addOffense() {
        try {
            StudentInfoMgtApplication app = new StudentInfoMgtApplication();
            StudentFacade studentFacade = app.getStudentFacade();

            while (true) {
                System.out.println("\nAdding an Offense:");

                String violationName;
                Violation violation;
                String studentId;
                Student student;
                Timestamp offenseDate;

                do {
                    System.out.print("Enter Violation: ");
                    violationName = scanner.next();
                    violation = violationFacade.getViolationByName(violationName);
                    if (violation == null) {
                        System.out.println("Violation not found.");
                    }
                } while (violation == null);

                do {
                    System.out.print("Enter Student ID: ");
                    studentId = scanner.next();
                    student = studentFacade.getStudentById(studentId);
                    if (student == null) {
                        System.out.println("Student not found.");
                    }
                } while (student == null);

                do {
                    System.out.print("Enter Offense Date (YYYY-MM-DD): ");
                    String dateStr = scanner.next();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date parsedDate;
                    try {
                        parsedDate = dateFormat.parse(dateStr);
                        offenseDate = new Timestamp(parsedDate.getTime());
                    } catch (ParseException e) {
                        System.out.println("Invalid date format. Please enter date in YYYY-MM-DD format.");
                        offenseDate = null;
                    }
                } while (offenseDate == null);

                Offense newOffense = new Offense();
                newOffense.setViolation(violation);
                newOffense.setStudent(student);
                newOffense.setOffenseDate(offenseDate);

                boolean added = offenseFacade.addOffense(newOffense);

                if (added) {
                    System.out.println("Offense added successfully!");
                } else {
                    System.out.println("Failed to add offense.");
                }

                System.out.print("Do you want to add another offense? (yes/no): ");
                String choice = scanner.next();
                if (!choice.equalsIgnoreCase("yes")) {
                    break;
                }
            }
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter valid IDs.");
        } catch (Exception e) {
            System.err.println("An error occurred while adding an offense: " + e.getMessage());
            e.printStackTrace();
        }
    }


    private static void updateOffense() {
        try {
            Scanner scanner = new Scanner(System.in);
            StudentInfoMgtApplication app = new StudentInfoMgtApplication();
            StudentFacade studentFacade = app.getStudentFacade();

            while (true) {
                System.out.println("Updating Offense Information:");
                int offenseId;
                String newViolationName;
                String newStudentId;

                Offense newOffense;
                do {
                    System.out.print("Enter Offense ID: ");
                    while (!scanner.hasNextInt()) {
                        System.out.println("Invalid input. Please enter a valid offense ID.");
                        scanner.next();
                    }
                    offenseId = scanner.nextInt();
                    newOffense = offenseFacade.getOffenseByID(offenseId);
                    if (newOffense == null) {
                        System.out.println("Offense not found.");
                    }
                } while (newOffense == null);

                Violation newViolation = null;
                boolean validInput = false;

                while (!validInput) {
                    System.out.print("Enter New Violation: ");
                    newViolationName = scanner.next();
                    newViolation = violationFacade.getViolationByName(newViolationName);

                    if (newViolation != null) {
                        validInput = true;
                    } else {
                        System.out.println("Violation not found.");
                    }
                }

                Student newStudent;
                do {
                    System.out.print("Enter New Student ID: ");
                    newStudentId = scanner.next();
                    newStudent = studentFacade.getStudentById(newStudentId);
                    if (newStudent == null) {
                        System.out.println("Student not found.");
                    }
                } while (newStudent == null);

                Offense updatedOffense = new Offense();
                updatedOffense.setId(offenseId);
                updatedOffense.setViolation(newViolation);
                updatedOffense.setStudent(newStudent);
                updatedOffense.setOffenseDate(new Timestamp(System.currentTimeMillis()));

                boolean updated = offenseFacade.updateOffense(updatedOffense);

                if (updated) {
                    System.out.println("Offense information updated successfully!");
                } else {
                    System.out.println("Failed to update Offense information.");
                }

                System.out.print("Do you want to update another offense? (yes/no): ");
                String choice = scanner.next();
                if (!choice.equalsIgnoreCase("yes")) {
                    break;
                }
            }

        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter valid IDs.");
        } catch (Exception e) {
            String errorMessage = e.getMessage();
            if (errorMessage != null) {
                throw new RuntimeException(errorMessage);
            } else {
                throw new RuntimeException("An error occurred while updating Offense information.");
            }
        }

    }

    private static void addViolation() {
        try {
            System.out.println("\nAdding a Violation:");

            System.out.print("Enter Violation Description: ");
            scanner.nextLine();
            String description = scanner.nextLine();
            String name = description.toLowerCase();

            System.out.print("Enter Violation Type: ");
            String type = scanner.nextLine();

            System.out.print("Enter Community Service Hours: ");
            int commServHours = scanner.nextInt();
            scanner.nextLine();

            violationFacade.addViolation(name, type, commServHours);
            System.out.println("Violation added successfully!");
        } catch (Exception e) {
            System.err.println("An error occurred while adding a violation: " + e.getMessage());
        }
    }

    private static void updateViolation() {
        try {
            System.out.print("Enter Violation ID: ");
            int violationId = scanner.nextInt();

            System.out.print("Enter New Violation Name: ");
            scanner.nextLine();
            String newViolation = scanner.nextLine();

            System.out.print("Enter New Violation Type: ");
            String newViolationType = scanner.nextLine();

            System.out.print("Enter New Community Service Hours: ");
            int newCsHours = scanner.nextInt();

            Violation updatedViolation = new Violation();
            updatedViolation.setId(violationId);
            updatedViolation.setViolation(newViolation);
            updatedViolation.setType(newViolationType);
            updatedViolation.setCommServHours(newCsHours);

            boolean updated = violationFacade.updateViolation(updatedViolation);

            if (updated) {
                System.out.println("Violation information updated successfully!");
            } else {
                System.out.println("Failed to update Violation information.");
            }
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter valid IDs.");
        } catch (Exception e) {
            System.err.println("An error occurred while updating Violation information: " + e.getMessage());
        }
    }

    private static void viewAllViolation() {
        System.out.println("Showing all Violations ...");
        List<Violation> violationList =violationFacade.getAllViolation();
        for (Violation violation : violationList) {
            System.out.println("-------------------------------------");
            System.out.println("Violation ID: " + violation.getId());
            System.out.println("Violation: " + violation.getViolation());
            System.out.println("Violation Type: " + violation.getType());
            System.out.println("Community Service Hours: " + violation.getCommServHours());
        }
    }

    private static void filterViolationByType() {
        Scanner scanner = new Scanner(System.in);
        int violationType;

        do {
            System.out.println("Choose a type");
            System.out.println("[1] Major");
            System.out.println("[2] Minor");
            System.out.println("[0] Exit");
            System.out.println("Enter choice: ");

            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.next();
            }
            violationType = scanner.nextInt();

            switch (violationType) {
                case 1:
                    String major = "Major";
                    List<Violation> majorList = violationFacade.getAllViolationByType(major);
                    printViolations(majorList);
                    break;
                case 2:
                    String minor = "Minor";
                    List<Violation> minorList = violationFacade.getAllViolationByType(minor);
                    printViolations(minorList);
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter 0, 1, or 2.");
                    break;
            }
        } while (violationType != 0);
    }

    private static void printViolations(List<Violation> violations) {
        for (Violation violation : violations) {
            System.out.println("-------------------------------------");
            System.out.println("Violation ID: " + violation.getId());
            System.out.println("Violation: " + violation.getViolation());
            System.out.println("Violation Type: " + violation.getType());
            System.out.println("Community Service Hours: " + violation.getCommServHours());
        }
    }

    private static void renderCs() {
        try {
            int offenseId;
            do {
                System.out.print("Enter Offense-ID (0 to exit): ");
                if (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter an integer.");
                    scanner.next();
                    continue;
                }
                offenseId = scanner.nextInt();
                if (offenseId < 0) {
                    System.out.println("Invalid Offense ID. Please enter a non-negative integer.");
                    continue;
                }
                if (offenseId == 0) {
                    System.out.println("Exiting...");
                    return;
                }

                String studentId = offenseFacade.getOffenseByID(offenseId).getStudent().getStudentId();
                System.out.println("Student-ID: " + studentId);

                System.out.print("Enter Hours Rendered: ");
                int hoursRendered;
                if (!scanner.hasNextInt()) {
                    System.out.println("Invalid input. Please enter an integer.");
                    scanner.next();
                    continue;
                }
                hoursRendered = scanner.nextInt();
                if (hoursRendered < 0) {
                    System.out.println("Invalid input. Please enter a non-negative integer.");
                    continue;
                }

                Offense existingOffense = offenseFacade.getOffenseByID(offenseId);
                if (existingOffense != null) {
                    CommunityService newCs = new CommunityService();

                    StudentInfoMgtApplication app = new StudentInfoMgtApplication();
                    StudentFacade studentFacade = app.getStudentFacade();
                    Student student = studentFacade.getStudentById(studentId);

                    newCs.setStudent(student);
                    newCs.setHours_rendered(hoursRendered);
                    newCs.setDate_rendered(new Timestamp(System.currentTimeMillis()));

                    boolean render = communityServiceFacade.renderCs(newCs);

                    if (render) {
                        System.out.println("Community Service Rendered successfully!");
                    } else {
                        System.out.println("Failed to Render Community Service.");
                    }
                } else {
                    System.out.println("Offense with ID " + offenseId + " does not exist.");
                }
                return;
            } while (true);
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid value.");
            scanner.next();
        } catch (Exception e) {
            System.err.println("An error occurred while rendering Community Service: " + e.getMessage());
        }
    }

    private static void viewCsHistory() {
        try {
            List<CommunityService> csRecords = communityServiceFacade.getAllCs();

            if (csRecords != null && !csRecords.isEmpty()) {
                System.out.println("Community Service Records");
                for (CommunityService csRecord : csRecords) {
                    System.out.println("Community Service ID: " + csRecord.getId());
                    System.out.println("Student ID: " + csRecord.getStudent().getStudentId());
                    System.out.println("Student Last Name: " + csRecord.getStudent().getLastName());
                    System.out.println("Student First Name: " + csRecord.getStudent().getFirstName());
                    System.out.println("Student Middle Name: " + csRecord.getStudent().getMiddleName());
                    System.out.println("Date Rendered: " + csRecord.getDate_rendered());
                    System.out.println("Hours Rendered: " + csRecord.getHours_rendered());
                    System.out.println("-----------------------------------");
                }
            } else {
                System.out.println("No Community Service found.");
            }
        } catch (Exception e) {
            System.err.println("An error occurred while viewing community service history: " + e.getMessage());
        }
    }
}
